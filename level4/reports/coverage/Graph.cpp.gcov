        -:    0:Source:Graph.cpp
        -:    0:Graph:Graph.gcno
        -:    0:Data:Graph.gcda
        -:    0:Runs:4 
        -:    1:#include <iostream>
        -:    2:#include <vector>
        -:    3:#include <list>
        -:    4:#include <stack>
        -:    5:#include <cstdlib>
        -:    6:#include <unistd.h>
        -:    7:#include <algorithm>
        -:    8:
        -:    9:class Graph {
        -:   10:public:
        -:   11:    Graph(int vertices);
        -:   12:    void addEdge(int v, int w);
        -:   13:    void removeEdge(int v, int w);
        -:   14:    void printGraph() const;
        -:   15:    bool isEulerianCycle();  // Check if the graph has an Eulerian Cycle
        -:   16:    void findEulerianCycle();  // Find and print the Eulerian Cycle
        -:   17:    void generateRandomGraph(int numEdges);  // Generate a random graph
        -:   18:
        -:   19:private:
        -:   20:    int vertices; // Number of vertices
        -:   21:    std::vector<std::list<int>> adjList; // Adjacency list representation
        -:   22:
        -:   23:    bool isConnected();  // Check if the graph is connected
        -:   24:    void DFSUtil(int v, std::vector<bool>& visited);  // Utility function for DFS
        -:   25:};
        -:   26:
        -:   27:// Constructor to initialize graph with given number of vertices
        4:   28:Graph::Graph(int vertices) : vertices(vertices) {
        4:   29:    adjList.resize(vertices);
        4:   30:}
        -:   31:
        -:   32:// Function to add an edge from vertex v to vertex w
       40:   33:void Graph::addEdge(int v, int w) {
       40:   34:    adjList[v].push_back(w);
       40:   35:    adjList[w].push_back(v);  // As the graph is undirected, add an edge from w to v as well
       40:   36:}
        -:   37:
        -:   38:// Function to remove an edge from vertex v to vertex w
    #####:   39:void Graph::removeEdge(int v, int w) {
    #####:   40:    adjList[v].remove(w);
    #####:   41:    adjList[w].remove(v);  // As the graph is undirected, remove the edge from w to v as well
    #####:   42:}
        -:   43:
        -:   44:// Function to print the graph
        4:   45:void Graph::printGraph() const {
       24:   46:    for (int i = 0; i < vertices; ++i) {
       20:   47:        std::cout << "Vertex " << i << ":";
      100:   48:        for (auto v : adjList[i]) {
       80:   49:            std::cout << " -> " << v;
        -:   50:        }
       20:   51:        std::cout << std::endl;
        -:   52:    }
        4:   53:}
        -:   54:
        -:   55:// Function to check if the graph is connected
        4:   56:bool Graph::isConnected() {
        4:   57:    std::vector<bool> visited(vertices, false);
        -:   58:
        -:   59:    // Find a vertex with a non-zero degree
        4:   60:    int startVertex = -1;
       4*:   61:    for (int i = 0; i < vertices; ++i) {
        4:   62:        if (!adjList[i].empty()) {
        4:   63:            startVertex = i;
        4:   64:            break;
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:    // If there are no edges in the graph, return true (trivially Eulerian)
        4:   69:    if (startVertex == -1)
    #####:   70:        return true;
        -:   71:
        -:   72:    // Start DFS from a vertex with a non-zero degree
        4:   73:    DFSUtil(startVertex, visited);
        -:   74:
        -:   75:    // Check if all vertices with non-zero degree are visited
       24:   76:    for (int i = 0; i < vertices; ++i) {
      20*:   77:        if (!adjList[i].empty() && !visited[i])
    #####:   78:            return false;
        -:   79:    }
        -:   80:
        4:   81:    return true;
        4:   82:}
        -:   83:
        -:   84:// Utility function for DFS traversal
       20:   85:void Graph::DFSUtil(int v, std::vector<bool>& visited) {
       20:   86:    visited[v] = true;
      100:   87:    for (int u : adjList[v]) {
       80:   88:        if (!visited[u]) {
       16:   89:            DFSUtil(u, visited);
        -:   90:        }
        -:   91:    }
       20:   92:}
        -:   93:
        -:   94:// Function to check if the graph has an Eulerian Cycle
        4:   95:bool Graph::isEulerianCycle() {
        4:   96:    if (!isConnected())
    #####:   97:        return false;
        -:   98:
        -:   99:    // Check if all vertices with non-zero degree have even degree
       24:  100:    for (int i = 0; i < vertices; ++i) {
       20:  101:        if (adjList[i].size() % 2 != 0)
    #####:  102:            return false;
        -:  103:    }
        -:  104:
        4:  105:    return true;
        -:  106:}
        -:  107:
        -:  108:// Function to find and print the Eulerian Cycle
        4:  109:void Graph::findEulerianCycle() {
        4:  110:    if (!isEulerianCycle()) {
    #####:  111:        std::cout << "The graph does not have an Eulerian Cycle.\n";
    #####:  112:        return;
        -:  113:    }
        -:  114:
        -:  115:    // Use stack to store the path
        4:  116:    std::stack<int> stack;
        4:  117:    std::vector<int> eulerianCycle;
        4:  118:    std::vector<std::list<int>> tempAdjList = adjList;
        -:  119:
        4:  120:    int startVertex = 0;
        4:  121:    stack.push(startVertex);
        -:  122:
       88:  123:    while (!stack.empty()) {
       84:  124:        int v = stack.top();
        -:  125:
       84:  126:        if (!tempAdjList[v].empty()) {
       40:  127:            int u = tempAdjList[v].front();
       40:  128:            stack.push(u);
       40:  129:            tempAdjList[v].remove(u);
       40:  130:            tempAdjList[u].remove(v);
        -:  131:        } else {
       44:  132:            eulerianCycle.push_back(v);
       44:  133:            stack.pop();
        -:  134:        }
        -:  135:    }
        -:  136:
        -:  137:    // Print the Eulerian Cycle
        4:  138:    std::cout << "Eulerian Cycle: ";
       48:  139:    for (int v : eulerianCycle) {
       44:  140:        std::cout << v << " ";
        -:  141:    }
        4:  142:    std::cout << std::endl;
        4:  143:}
        -:  144:
        -:  145:// Function to generate a random graph with a given number of edges
        4:  146:void Graph::generateRandomGraph(int numEdges) {
      160:  147:    for (int i = 0; i < numEdges; ++i) {
      156:  148:        int v = rand() % vertices;
      156:  149:        int w = rand() % vertices;
        -:  150:
        -:  151:        // Avoid loops and duplicate edges
      156:  152:        if (v != w && std::find(adjList[v].begin(), adjList[v].end(), w) == adjList[v].end()) {
       40:  153:            addEdge(v, w);
        -:  154:        } else {
        -:  155:            // Try again with different values if the edge was invalid
      116:  156:            --i;
        -:  157:        }
        -:  158:    }
        4:  159:}
        -:  160:
        4:  161:int main(int argc, char* argv[]) {
        4:  162:    int numVertices = 5;  // Default number of vertices
        4:  163:    int numEdges = 10;    // Default number of edges
        4:  164:    int seed = time(nullptr); // Default seed based on current time
        -:  165:
        -:  166:    // Parse command-line options using getopt
        -:  167:    int option;
       16:  168:    while ((option = getopt(argc, argv, "v:e:s:")) != -1) {
       12:  169:        switch (option) {
        4:  170:            case 'v':
        4:  171:                numVertices = std::stoi(optarg);
        4:  172:                break;
        4:  173:            case 'e':
        4:  174:                numEdges = std::stoi(optarg);
        4:  175:                break;
        4:  176:            case 's':
        4:  177:                seed = std::stoi(optarg);
        4:  178:                break;
    #####:  179:            default:
    #####:  180:                std::cerr << "Usage: " << argv[0] << " -v numVertices -e numEdges -s seed\n";
    #####:  181:                return 1;
        -:  182:        }
        -:  183:    }
        -:  184:
        -:  185:    // Initialize random seed
        4:  186:    srand(seed);
        -:  187:
        -:  188:    // Create and print a random graph
        4:  189:    Graph g(numVertices);
        4:  190:    g.generateRandomGraph(numEdges);
        4:  191:    g.printGraph();
        -:  192:
        -:  193:    // Find and print the Eulerian Cycle if it exists
        4:  194:    g.findEulerianCycle();
        -:  195:
        4:  196:    return 0;
        -:  197:}
