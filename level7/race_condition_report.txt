
=== Helgrind Race Condition Analysis ===
Date: Thu Jan 16 09:44:50 AM IST 2025

1. Race Condition Details:
   - Global variable 'accum' is accessed by multiple threads
   - No synchronization mechanism (mutex/lock) protecting accum
   - Operation 'accum += x * x' is not atomic

2. Helgrind Analysis:
   Command used: valgrind --tool=helgrind ./race
==8198== Possible data race during read of size 8 at 0x10C018 by thread #4
==8198== Locks held: none
==8198==    at 0x10920B: square(void*) (race.cpp:12)
==8198==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==8198==    by 0x4907AC2: start_thread (pthread_create.c:442)
==8198==    by 0x4998A03: clone (clone.S:100)
--
==8198== Possible data race during write of size 8 at 0x10C018 by thread #4
==8198== Locks held: none
==8198==    at 0x109215: square(void*) (race.cpp:12)
==8198==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==8198==    by 0x4907AC2: start_thread (pthread_create.c:442)
==8198==    by 0x4998A03: clone (clone.S:100)

3. Impact:
   - Multiple threads updating shared variable without synchronization
   - Race condition can lead to incorrect final value of accum
   - Results will be non-deterministic between runs

4. Location:
   - Function: square()
   - Variable: accum (global)
   - Operation: accum += x * x
